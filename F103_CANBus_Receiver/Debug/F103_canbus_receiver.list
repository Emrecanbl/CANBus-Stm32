
F103_canbus_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001fb4  08001fb4  00002fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800200c  0800200c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800200c  0800200c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800200c  0800200c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800200c  0800200c  0000300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002010  08002010  00003010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002014  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002020  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002020  000040d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d77  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001541  00000000  00000000  0000bdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058b  00000000  00000000  0000da30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163be  00000000  00000000  0000dfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086d8  00000000  00000000  00024379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c00  00000000  00000000  0002ca51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad651  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce0  00000000  00000000  000ad694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000af374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f9c 	.word	0x08001f9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001f9c 	.word	0x08001f9c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fae8 	bl	8000724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f87a 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f93c 	bl	80003d4 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f8bc 	bl	80002d8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f90e 	bl	8000380 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000164:	482e      	ldr	r0, [pc, #184]	@ (8000220 <main+0xd4>)
 8000166:	f000 fd27 	bl	8000bb8 <HAL_CAN_Start>
  HAL_UART_Transmit(&huart1, "UART STARTED \r\n", 12, 1000);
 800016a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800016e:	220c      	movs	r2, #12
 8000170:	492c      	ldr	r1, [pc, #176]	@ (8000224 <main+0xd8>)
 8000172:	482d      	ldr	r0, [pc, #180]	@ (8000228 <main+0xdc>)
 8000174:	f001 fd66 	bl	8001c44 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0 , &reciver_struct, Received_Data);
 8000178:	4b2c      	ldr	r3, [pc, #176]	@ (800022c <main+0xe0>)
 800017a:	4a2d      	ldr	r2, [pc, #180]	@ (8000230 <main+0xe4>)
 800017c:	2100      	movs	r1, #0
 800017e:	4828      	ldr	r0, [pc, #160]	@ (8000220 <main+0xd4>)
 8000180:	f000 fd5e 	bl	8000c40 <HAL_CAN_GetRxMessage>
	  if(Received_Data[2] == 0){
 8000184:	4b29      	ldr	r3, [pc, #164]	@ (800022c <main+0xe0>)
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d112      	bne.n	80001b2 <main+0x66>
		  HAL_UART_Transmit(&huart1, "RESET\r\n",strlen("RESET\r\n"), 1000);
 800018c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000190:	2207      	movs	r2, #7
 8000192:	4928      	ldr	r1, [pc, #160]	@ (8000234 <main+0xe8>)
 8000194:	4824      	ldr	r0, [pc, #144]	@ (8000228 <main+0xdc>)
 8000196:	f001 fd55 	bl	8001c44 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin, 0);
 800019a:	2200      	movs	r2, #0
 800019c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001a0:	4825      	ldr	r0, [pc, #148]	@ (8000238 <main+0xec>)
 80001a2:	f001 f8d7 	bl	8001354 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(FAN_GPIO_Port,FAN_Pin, 0);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2101      	movs	r1, #1
 80001aa:	4824      	ldr	r0, [pc, #144]	@ (800023c <main+0xf0>)
 80001ac:	f001 f8d2 	bl	8001354 <HAL_GPIO_WritePin>
 80001b0:	e01d      	b.n	80001ee <main+0xa2>
	  }
	  else if(Received_Data[2] == 1){
 80001b2:	4b1e      	ldr	r3, [pc, #120]	@ (800022c <main+0xe0>)
 80001b4:	789b      	ldrb	r3, [r3, #2]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d112      	bne.n	80001e0 <main+0x94>
		  HAL_UART_Transmit(&huart1, "SET\r\n",strlen("SET\r\n"), 1000);
 80001ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001be:	2205      	movs	r2, #5
 80001c0:	491f      	ldr	r1, [pc, #124]	@ (8000240 <main+0xf4>)
 80001c2:	4819      	ldr	r0, [pc, #100]	@ (8000228 <main+0xdc>)
 80001c4:	f001 fd3e 	bl	8001c44 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin, 1);
 80001c8:	2201      	movs	r2, #1
 80001ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ce:	481a      	ldr	r0, [pc, #104]	@ (8000238 <main+0xec>)
 80001d0:	f001 f8c0 	bl	8001354 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(FAN_GPIO_Port,FAN_Pin, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	4818      	ldr	r0, [pc, #96]	@ (800023c <main+0xf0>)
 80001da:	f001 f8bb 	bl	8001354 <HAL_GPIO_WritePin>
 80001de:	e006      	b.n	80001ee <main+0xa2>
	  }
	  else {
		  HAL_UART_Transmit(&huart1, "ERROR \r\n", 5, 1000);
 80001e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e4:	2205      	movs	r2, #5
 80001e6:	4917      	ldr	r1, [pc, #92]	@ (8000244 <main+0xf8>)
 80001e8:	480f      	ldr	r0, [pc, #60]	@ (8000228 <main+0xdc>)
 80001ea:	f001 fd2b 	bl	8001c44 <HAL_UART_Transmit>
	  }
	  Trasmitter_info[0] = reciver_struct.StdId;
 80001ee:	4b10      	ldr	r3, [pc, #64]	@ (8000230 <main+0xe4>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a15      	ldr	r2, [pc, #84]	@ (8000248 <main+0xfc>)
 80001f4:	6013      	str	r3, [r2, #0]
	  Trasmitter_info[1] = reciver_struct.ExtId;
 80001f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000230 <main+0xe4>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	4a13      	ldr	r2, [pc, #76]	@ (8000248 <main+0xfc>)
 80001fc:	6053      	str	r3, [r2, #4]
	  Trasmitter_info[2] = reciver_struct.IDE;
 80001fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <main+0xe4>)
 8000200:	689b      	ldr	r3, [r3, #8]
 8000202:	4a11      	ldr	r2, [pc, #68]	@ (8000248 <main+0xfc>)
 8000204:	6093      	str	r3, [r2, #8]
	  Trasmitter_info[3] = reciver_struct.RTR;
 8000206:	4b0a      	ldr	r3, [pc, #40]	@ (8000230 <main+0xe4>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	4a0f      	ldr	r2, [pc, #60]	@ (8000248 <main+0xfc>)
 800020c:	60d3      	str	r3, [r2, #12]
	  Trasmitter_info[4] = reciver_struct.DLC;
 800020e:	4b08      	ldr	r3, [pc, #32]	@ (8000230 <main+0xe4>)
 8000210:	691b      	ldr	r3, [r3, #16]
 8000212:	4a0d      	ldr	r2, [pc, #52]	@ (8000248 <main+0xfc>)
 8000214:	6113      	str	r3, [r2, #16]

	  HAL_Delay(1000);
 8000216:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800021a:	f000 fae5 	bl	80007e8 <HAL_Delay>
	  HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0 , &reciver_struct, Received_Data);
 800021e:	e7ab      	b.n	8000178 <main+0x2c>
 8000220:	20000028 	.word	0x20000028
 8000224:	08001fb4 	.word	0x08001fb4
 8000228:	20000050 	.word	0x20000050
 800022c:	200000b4 	.word	0x200000b4
 8000230:	20000098 	.word	0x20000098
 8000234:	08001fc4 	.word	0x08001fc4
 8000238:	40011000 	.word	0x40011000
 800023c:	40010800 	.word	0x40010800
 8000240:	08001fcc 	.word	0x08001fcc
 8000244:	08001fd4 	.word	0x08001fd4
 8000248:	200000bc 	.word	0x200000bc

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	@ 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	@ 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fe72 	bl	8001f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026e:	2301      	movs	r3, #1
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000272:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	2302      	movs	r3, #2
 8000282:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000284:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800028e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4618      	mov	r0, r3
 8000296:	f001 f875 	bl	8001384 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a0:	f000 f904 	bl	80004ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fae2 	bl	8001888 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ca:	f000 f8ef 	bl	80004ac <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	@ 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	@ 0x28
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002de:	4b25      	ldr	r3, [pc, #148]	@ (8000374 <MX_CAN_Init+0x9c>)
 80002e0:	4a25      	ldr	r2, [pc, #148]	@ (8000378 <MX_CAN_Init+0xa0>)
 80002e2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80002e4:	4b23      	ldr	r3, [pc, #140]	@ (8000374 <MX_CAN_Init+0x9c>)
 80002e6:	2212      	movs	r2, #18
 80002e8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002ea:	4b22      	ldr	r3, [pc, #136]	@ (8000374 <MX_CAN_Init+0x9c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002f0:	4b20      	ldr	r3, [pc, #128]	@ (8000374 <MX_CAN_Init+0x9c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80002f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000374 <MX_CAN_Init+0x9c>)
 80002f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000374 <MX_CAN_Init+0x9c>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000304:	4b1b      	ldr	r3, [pc, #108]	@ (8000374 <MX_CAN_Init+0x9c>)
 8000306:	2200      	movs	r2, #0
 8000308:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800030a:	4b1a      	ldr	r3, [pc, #104]	@ (8000374 <MX_CAN_Init+0x9c>)
 800030c:	2200      	movs	r2, #0
 800030e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000310:	4b18      	ldr	r3, [pc, #96]	@ (8000374 <MX_CAN_Init+0x9c>)
 8000312:	2200      	movs	r2, #0
 8000314:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000316:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <MX_CAN_Init+0x9c>)
 8000318:	2200      	movs	r2, #0
 800031a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800031c:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <MX_CAN_Init+0x9c>)
 800031e:	2200      	movs	r2, #0
 8000320:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000322:	4b14      	ldr	r3, [pc, #80]	@ (8000374 <MX_CAN_Init+0x9c>)
 8000324:	2200      	movs	r2, #0
 8000326:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000328:	4812      	ldr	r0, [pc, #72]	@ (8000374 <MX_CAN_Init+0x9c>)
 800032a:	f000 fa81 	bl	8000830 <HAL_CAN_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000334:	f000 f8ba 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef CAN_Filter;
  CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000338:	2301      	movs	r3, #1
 800033a:	623b      	str	r3, [r7, #32]
  CAN_Filter.FilterBank = 13;
 800033c:	230d      	movs	r3, #13
 800033e:	617b      	str	r3, [r7, #20]
  CAN_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
  CAN_Filter.FilterIdHigh=0x1<<5;//Message id=1 from sender
 8000344:	2320      	movs	r3, #32
 8000346:	603b      	str	r3, [r7, #0]
  CAN_Filter.FilterIdLow=0;
 8000348:	2300      	movs	r3, #0
 800034a:	607b      	str	r3, [r7, #4]
  CAN_Filter.FilterMaskIdHigh = 0xFFFF<<5;// Only one id accepted
 800034c:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <MX_CAN_Init+0xa4>)
 800034e:	60bb      	str	r3, [r7, #8]
  CAN_Filter.FilterMaskIdLow = 0xFFFF;
 8000350:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000354:	60fb      	str	r3, [r7, #12]
  CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
  CAN_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800035a:	2301      	movs	r3, #1
 800035c:	61fb      	str	r3, [r7, #28]
  CAN_Filter.SlaveStartFilterBank = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &CAN_Filter);
 8000362:	463b      	mov	r3, r7
 8000364:	4619      	mov	r1, r3
 8000366:	4803      	ldr	r0, [pc, #12]	@ (8000374 <MX_CAN_Init+0x9c>)
 8000368:	f000 fb5d 	bl	8000a26 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 800036c:	bf00      	nop
 800036e:	3728      	adds	r7, #40	@ 0x28
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000028 	.word	0x20000028
 8000378:	40006400 	.word	0x40006400
 800037c:	001fffe0 	.word	0x001fffe0

08000380 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000384:	4b11      	ldr	r3, [pc, #68]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 8000386:	4a12      	ldr	r2, [pc, #72]	@ (80003d0 <MX_USART1_UART_Init+0x50>)
 8000388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800038a:	4b10      	ldr	r3, [pc, #64]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 800038c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	@ (80003cc <MX_USART1_UART_Init+0x4c>)
 80003b8:	f001 fbf4 	bl	8001ba4 <HAL_UART_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003c2:	f000 f873 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000050 	.word	0x20000050
 80003d0:	40013800 	.word	0x40013800

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e8:	4b2d      	ldr	r3, [pc, #180]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a2c      	ldr	r2, [pc, #176]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b2a      	ldr	r3, [pc, #168]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000400:	4b27      	ldr	r3, [pc, #156]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a26      	ldr	r2, [pc, #152]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b24      	ldr	r3, [pc, #144]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0320 	and.w	r3, r3, #32
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a20      	ldr	r2, [pc, #128]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b1e      	ldr	r3, [pc, #120]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000430:	4b1b      	ldr	r3, [pc, #108]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a1a      	ldr	r2, [pc, #104]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 8000436:	f043 0308 	orr.w	r3, r3, #8
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <MX_GPIO_Init+0xcc>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0308 	and.w	r3, r3, #8
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800044e:	4815      	ldr	r0, [pc, #84]	@ (80004a4 <MX_GPIO_Init+0xd0>)
 8000450:	f000 ff80 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2101      	movs	r1, #1
 8000458:	4813      	ldr	r0, [pc, #76]	@ (80004a8 <MX_GPIO_Init+0xd4>)
 800045a:	f000 ff7b 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800045e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	480b      	ldr	r0, [pc, #44]	@ (80004a4 <MX_GPIO_Init+0xd0>)
 8000478:	f000 fde8 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_Pin */
  GPIO_InitStruct.Pin = FAN_Pin;
 800047c:	2301      	movs	r3, #1
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000480:	2301      	movs	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	2302      	movs	r3, #2
 800048a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4805      	ldr	r0, [pc, #20]	@ (80004a8 <MX_GPIO_Init+0xd4>)
 8000494:	f000 fdda 	bl	800104c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40011000 	.word	0x40011000
 80004a8:	40010800 	.word	0x40010800

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <Error_Handler+0x8>

080004b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004be:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <HAL_MspInit+0x5c>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <HAL_MspInit+0x5c>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <HAL_MspInit+0x5c>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <HAL_MspInit+0x5c>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000518 <HAL_MspInit+0x60>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	4a04      	ldr	r2, [pc, #16]	@ (8000518 <HAL_MspInit+0x60>)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000
 8000518:	40010000 	.word	0x40010000

0800051c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	@ 0x28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a25      	ldr	r2, [pc, #148]	@ (80005cc <HAL_CAN_MspInit+0xb0>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d143      	bne.n	80005c4 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800053c:	4b24      	ldr	r3, [pc, #144]	@ (80005d0 <HAL_CAN_MspInit+0xb4>)
 800053e:	69db      	ldr	r3, [r3, #28]
 8000540:	4a23      	ldr	r2, [pc, #140]	@ (80005d0 <HAL_CAN_MspInit+0xb4>)
 8000542:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000546:	61d3      	str	r3, [r2, #28]
 8000548:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <HAL_CAN_MspInit+0xb4>)
 800054a:	69db      	ldr	r3, [r3, #28]
 800054c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000550:	613b      	str	r3, [r7, #16]
 8000552:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000554:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <HAL_CAN_MspInit+0xb4>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a1d      	ldr	r2, [pc, #116]	@ (80005d0 <HAL_CAN_MspInit+0xb4>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <HAL_CAN_MspInit+0xb4>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0308 	and.w	r3, r3, #8
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800056c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	4814      	ldr	r0, [pc, #80]	@ (80005d4 <HAL_CAN_MspInit+0xb8>)
 8000582:	f000 fd63 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800058a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058c:	2302      	movs	r3, #2
 800058e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000590:	2303      	movs	r3, #3
 8000592:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	480e      	ldr	r0, [pc, #56]	@ (80005d4 <HAL_CAN_MspInit+0xb8>)
 800059c:	f000 fd56 	bl	800104c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80005a0:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <HAL_CAN_MspInit+0xbc>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80005a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005a8:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80005ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80005b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80005b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80005be:	4a06      	ldr	r2, [pc, #24]	@ (80005d8 <HAL_CAN_MspInit+0xbc>)
 80005c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005c2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	@ 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40006400 	.word	0x40006400
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010c00 	.word	0x40010c00
 80005d8:	40010000 	.word	0x40010000

080005dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000668 <HAL_UART_MspInit+0x8c>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d131      	bne.n	8000660 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005fc:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <HAL_UART_MspInit+0x90>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a1a      	ldr	r2, [pc, #104]	@ (800066c <HAL_UART_MspInit+0x90>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <HAL_UART_MspInit+0x90>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	4b15      	ldr	r3, [pc, #84]	@ (800066c <HAL_UART_MspInit+0x90>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a14      	ldr	r2, [pc, #80]	@ (800066c <HAL_UART_MspInit+0x90>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b12      	ldr	r3, [pc, #72]	@ (800066c <HAL_UART_MspInit+0x90>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800062c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000636:	2303      	movs	r3, #3
 8000638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	4619      	mov	r1, r3
 8000640:	480b      	ldr	r0, [pc, #44]	@ (8000670 <HAL_UART_MspInit+0x94>)
 8000642:	f000 fd03 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800064a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4619      	mov	r1, r3
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <HAL_UART_MspInit+0x94>)
 800065c:	f000 fcf6 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000660:	bf00      	nop
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40013800 	.word	0x40013800
 800066c:	40021000 	.word	0x40021000
 8000670:	40010800 	.word	0x40010800

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <NMI_Handler+0x4>

0800067c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <HardFault_Handler+0x4>

08000684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <MemManage_Handler+0x4>

0800068c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <BusFault_Handler+0x4>

08000694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <UsageFault_Handler+0x4>

0800069c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c4:	f000 f874 	bl	80007b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d8:	f7ff fff8 	bl	80006cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480b      	ldr	r0, [pc, #44]	@ (800070c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006de:	490c      	ldr	r1, [pc, #48]	@ (8000710 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000714 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a09      	ldr	r2, [pc, #36]	@ (8000718 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006f4:	4c09      	ldr	r4, [pc, #36]	@ (800071c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000702:	f001 fc27 	bl	8001f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000706:	f7ff fd21 	bl	800014c <main>
  bx lr
 800070a:	4770      	bx	lr
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000714:	08002014 	.word	0x08002014
  ldr r2, =_sbss
 8000718:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800071c:	200000d4 	.word	0x200000d4

08000720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_2_IRQHandler>
	...

08000724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <HAL_Init+0x28>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a07      	ldr	r2, [pc, #28]	@ (800074c <HAL_Init+0x28>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 fc55 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800073a:	200f      	movs	r0, #15
 800073c:	f000 f808 	bl	8000750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000740:	f7ff feba 	bl	80004b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40022000 	.word	0x40022000

08000750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_InitTick+0x54>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <HAL_InitTick+0x58>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000766:	fbb3 f3f1 	udiv	r3, r3, r1
 800076a:	fbb2 f3f3 	udiv	r3, r2, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fc5f 	bl	8001032 <HAL_SYSTICK_Config>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	e00e      	b.n	800079c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d80a      	bhi.n	800079a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000784:	2200      	movs	r2, #0
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f000 fc35 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000790:	4a06      	ldr	r2, [pc, #24]	@ (80007ac <HAL_InitTick+0x5c>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000796:	2300      	movs	r3, #0
 8000798:	e000      	b.n	800079c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000004 	.word	0x20000004

080007b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b4:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <HAL_IncTick+0x1c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <HAL_IncTick+0x20>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	4a03      	ldr	r2, [pc, #12]	@ (80007d0 <HAL_IncTick+0x20>)
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	20000008 	.word	0x20000008
 80007d0:	200000d0 	.word	0x200000d0

080007d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return uwTick;
 80007d8:	4b02      	ldr	r3, [pc, #8]	@ (80007e4 <HAL_GetTick+0x10>)
 80007da:	681b      	ldr	r3, [r3, #0]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	200000d0 	.word	0x200000d0

080007e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f0:	f7ff fff0 	bl	80007d4 <HAL_GetTick>
 80007f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000800:	d005      	beq.n	800080e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000802:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <HAL_Delay+0x44>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4413      	add	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800080e:	bf00      	nop
 8000810:	f7ff ffe0 	bl	80007d4 <HAL_GetTick>
 8000814:	4602      	mov	r2, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	429a      	cmp	r2, r3
 800081e:	d8f7      	bhi.n	8000810 <HAL_Delay+0x28>
  {
  }
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008

08000830 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e0ed      	b.n	8000a1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d102      	bne.n	8000854 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fe64 	bl	800051c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f042 0201 	orr.w	r2, r2, #1
 8000862:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000864:	f7ff ffb6 	bl	80007d4 <HAL_GetTick>
 8000868:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800086a:	e012      	b.n	8000892 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800086c:	f7ff ffb2 	bl	80007d4 <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2b0a      	cmp	r3, #10
 8000878:	d90b      	bls.n	8000892 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800087e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2205      	movs	r2, #5
 800088a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e0c5      	b.n	8000a1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0e5      	beq.n	800086c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f022 0202 	bic.w	r2, r2, #2
 80008ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008b0:	f7ff ff90 	bl	80007d4 <HAL_GetTick>
 80008b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008b6:	e012      	b.n	80008de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008b8:	f7ff ff8c 	bl	80007d4 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2b0a      	cmp	r3, #10
 80008c4:	d90b      	bls.n	80008de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2205      	movs	r2, #5
 80008d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e09f      	b.n	8000a1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1e5      	bne.n	80008b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7e1b      	ldrb	r3, [r3, #24]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d108      	bne.n	8000906 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	e007      	b.n	8000916 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7e5b      	ldrb	r3, [r3, #25]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d108      	bne.n	8000930 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	e007      	b.n	8000940 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800093e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7e9b      	ldrb	r3, [r3, #26]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d108      	bne.n	800095a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f042 0220 	orr.w	r2, r2, #32
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	e007      	b.n	800096a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f022 0220 	bic.w	r2, r2, #32
 8000968:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7edb      	ldrb	r3, [r3, #27]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d108      	bne.n	8000984 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 0210 	bic.w	r2, r2, #16
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	e007      	b.n	8000994 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f042 0210 	orr.w	r2, r2, #16
 8000992:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7f1b      	ldrb	r3, [r3, #28]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d108      	bne.n	80009ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 0208 	orr.w	r2, r2, #8
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	e007      	b.n	80009be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 0208 	bic.w	r2, r2, #8
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	7f5b      	ldrb	r3, [r3, #29]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d108      	bne.n	80009d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f042 0204 	orr.w	r2, r2, #4
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	e007      	b.n	80009e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f022 0204 	bic.w	r2, r2, #4
 80009e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	431a      	orrs	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	ea42 0103 	orr.w	r1, r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2201      	movs	r2, #1
 8000a18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a3c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a3e:	7cfb      	ldrb	r3, [r7, #19]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d003      	beq.n	8000a4c <HAL_CAN_ConfigFilter+0x26>
 8000a44:	7cfb      	ldrb	r3, [r7, #19]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	f040 80aa 	bne.w	8000ba0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000a52:	f043 0201 	orr.w	r2, r3, #1
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	f003 031f 	and.w	r3, r3, #31
 8000a64:	2201      	movs	r2, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d123      	bne.n	8000ace <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	401a      	ands	r2, r3
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000aa8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3248      	adds	r2, #72	@ 0x48
 8000aae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ac2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ac4:	6979      	ldr	r1, [r7, #20]
 8000ac6:	3348      	adds	r3, #72	@ 0x48
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d122      	bne.n	8000b1c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000af2:	683a      	ldr	r2, [r7, #0]
 8000af4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000af6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3248      	adds	r2, #72	@ 0x48
 8000afc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b12:	6979      	ldr	r1, [r7, #20]
 8000b14:	3348      	adds	r3, #72	@ 0x48
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	440b      	add	r3, r1
 8000b1a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d109      	bne.n	8000b38 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000b36:	e007      	b.n	8000b48 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	431a      	orrs	r2, r3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d109      	bne.n	8000b64 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000b62:	e007      	b.n	8000b74 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d107      	bne.n	8000b8c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	431a      	orrs	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b92:	f023 0201 	bic.w	r2, r3, #1
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e006      	b.n	8000bae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ba4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
  }
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	371c      	adds	r7, #28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d12e      	bne.n	8000c2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2202      	movs	r2, #2
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0201 	bic.w	r2, r2, #1
 8000be2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000be4:	f7ff fdf6 	bl	80007d4 <HAL_GetTick>
 8000be8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bea:	e012      	b.n	8000c12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bec:	f7ff fdf2 	bl	80007d4 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b0a      	cmp	r3, #10
 8000bf8:	d90b      	bls.n	8000c12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2205      	movs	r2, #5
 8000c0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e012      	b.n	8000c38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1e5      	bne.n	8000bec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e006      	b.n	8000c38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c2e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
  }
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c54:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c56:	7dfb      	ldrb	r3, [r7, #23]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d003      	beq.n	8000c64 <HAL_CAN_GetRxMessage+0x24>
 8000c5c:	7dfb      	ldrb	r3, [r7, #23]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	f040 8103 	bne.w	8000e6a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10e      	bne.n	8000c88 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d116      	bne.n	8000ca6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e0f7      	b.n	8000e78 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d107      	bne.n	8000ca6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e0e8      	b.n	8000e78 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	331b      	adds	r3, #27
 8000cae:	011b      	lsls	r3, r3, #4
 8000cb0:	4413      	add	r3, r2
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0204 	and.w	r2, r3, #4
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10c      	bne.n	8000cde <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	331b      	adds	r3, #27
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	4413      	add	r3, r2
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	0d5b      	lsrs	r3, r3, #21
 8000cd4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	e00b      	b.n	8000cf6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	331b      	adds	r3, #27
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	4413      	add	r3, r2
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	331b      	adds	r3, #27
 8000cfe:	011b      	lsls	r3, r3, #4
 8000d00:	4413      	add	r3, r2
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0202 	and.w	r2, r3, #2
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	331b      	adds	r3, #27
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	4413      	add	r3, r2
 8000d18:	3304      	adds	r3, #4
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2208      	movs	r2, #8
 8000d28:	611a      	str	r2, [r3, #16]
 8000d2a:	e00b      	b.n	8000d44 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	331b      	adds	r3, #27
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	4413      	add	r3, r2
 8000d38:	3304      	adds	r3, #4
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 020f 	and.w	r2, r3, #15
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	331b      	adds	r3, #27
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	4413      	add	r3, r2
 8000d50:	3304      	adds	r3, #4
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	331b      	adds	r3, #27
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	4413      	add	r3, r2
 8000d68:	3304      	adds	r3, #4
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	0c1b      	lsrs	r3, r3, #16
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	4413      	add	r3, r2
 8000d7e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	4413      	add	r3, r2
 8000d94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	0a1a      	lsrs	r2, r3, #8
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4413      	add	r3, r2
 8000dae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	0c1a      	lsrs	r2, r3, #16
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	3302      	adds	r3, #2
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	4413      	add	r3, r2
 8000dc8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	0e1a      	lsrs	r2, r3, #24
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	3303      	adds	r3, #3
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	4413      	add	r3, r2
 8000de2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	3304      	adds	r3, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	4413      	add	r3, r2
 8000dfa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	0a1a      	lsrs	r2, r3, #8
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3305      	adds	r3, #5
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	4413      	add	r3, r2
 8000e14:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	0c1a      	lsrs	r2, r3, #16
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	3306      	adds	r3, #6
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	0e1a      	lsrs	r2, r3, #24
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	3307      	adds	r3, #7
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d108      	bne.n	8000e56 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 0220 	orr.w	r2, r2, #32
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	e007      	b.n	8000e66 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 0220 	orr.w	r2, r2, #32
 8000e64:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e006      	b.n	8000e78 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
  }
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
	...

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	@ (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	@ (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	@ 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff90 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff49 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff5e 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff90 	bl	8000f3c <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5f 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffb0 	bl	8000fa0 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b08b      	sub	sp, #44	@ 0x2c
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105e:	e169      	b.n	8001334 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001060:	2201      	movs	r2, #1
 8001062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 8158 	bne.w	800132e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a9a      	ldr	r2, [pc, #616]	@ (80012ec <HAL_GPIO_Init+0x2a0>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d05e      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
 8001088:	4a98      	ldr	r2, [pc, #608]	@ (80012ec <HAL_GPIO_Init+0x2a0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d875      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 800108e:	4a98      	ldr	r2, [pc, #608]	@ (80012f0 <HAL_GPIO_Init+0x2a4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d058      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
 8001094:	4a96      	ldr	r2, [pc, #600]	@ (80012f0 <HAL_GPIO_Init+0x2a4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d86f      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 800109a:	4a96      	ldr	r2, [pc, #600]	@ (80012f4 <HAL_GPIO_Init+0x2a8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d052      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
 80010a0:	4a94      	ldr	r2, [pc, #592]	@ (80012f4 <HAL_GPIO_Init+0x2a8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d869      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 80010a6:	4a94      	ldr	r2, [pc, #592]	@ (80012f8 <HAL_GPIO_Init+0x2ac>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d04c      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
 80010ac:	4a92      	ldr	r2, [pc, #584]	@ (80012f8 <HAL_GPIO_Init+0x2ac>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d863      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 80010b2:	4a92      	ldr	r2, [pc, #584]	@ (80012fc <HAL_GPIO_Init+0x2b0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d046      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
 80010b8:	4a90      	ldr	r2, [pc, #576]	@ (80012fc <HAL_GPIO_Init+0x2b0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d85d      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 80010be:	2b12      	cmp	r3, #18
 80010c0:	d82a      	bhi.n	8001118 <HAL_GPIO_Init+0xcc>
 80010c2:	2b12      	cmp	r3, #18
 80010c4:	d859      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 80010c6:	a201      	add	r2, pc, #4	@ (adr r2, 80010cc <HAL_GPIO_Init+0x80>)
 80010c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010cc:	08001147 	.word	0x08001147
 80010d0:	08001121 	.word	0x08001121
 80010d4:	08001133 	.word	0x08001133
 80010d8:	08001175 	.word	0x08001175
 80010dc:	0800117b 	.word	0x0800117b
 80010e0:	0800117b 	.word	0x0800117b
 80010e4:	0800117b 	.word	0x0800117b
 80010e8:	0800117b 	.word	0x0800117b
 80010ec:	0800117b 	.word	0x0800117b
 80010f0:	0800117b 	.word	0x0800117b
 80010f4:	0800117b 	.word	0x0800117b
 80010f8:	0800117b 	.word	0x0800117b
 80010fc:	0800117b 	.word	0x0800117b
 8001100:	0800117b 	.word	0x0800117b
 8001104:	0800117b 	.word	0x0800117b
 8001108:	0800117b 	.word	0x0800117b
 800110c:	0800117b 	.word	0x0800117b
 8001110:	08001129 	.word	0x08001129
 8001114:	0800113d 	.word	0x0800113d
 8001118:	4a79      	ldr	r2, [pc, #484]	@ (8001300 <HAL_GPIO_Init+0x2b4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800111e:	e02c      	b.n	800117a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	623b      	str	r3, [r7, #32]
          break;
 8001126:	e029      	b.n	800117c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	3304      	adds	r3, #4
 800112e:	623b      	str	r3, [r7, #32]
          break;
 8001130:	e024      	b.n	800117c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	3308      	adds	r3, #8
 8001138:	623b      	str	r3, [r7, #32]
          break;
 800113a:	e01f      	b.n	800117c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	330c      	adds	r3, #12
 8001142:	623b      	str	r3, [r7, #32]
          break;
 8001144:	e01a      	b.n	800117c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800114e:	2304      	movs	r3, #4
 8001150:	623b      	str	r3, [r7, #32]
          break;
 8001152:	e013      	b.n	800117c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d105      	bne.n	8001168 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800115c:	2308      	movs	r3, #8
 800115e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	611a      	str	r2, [r3, #16]
          break;
 8001166:	e009      	b.n	800117c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001168:	2308      	movs	r3, #8
 800116a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	615a      	str	r2, [r3, #20]
          break;
 8001172:	e003      	b.n	800117c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
          break;
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x130>
          break;
 800117a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	2bff      	cmp	r3, #255	@ 0xff
 8001180:	d801      	bhi.n	8001186 <HAL_GPIO_Init+0x13a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	e001      	b.n	800118a <HAL_GPIO_Init+0x13e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3304      	adds	r3, #4
 800118a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2bff      	cmp	r3, #255	@ 0xff
 8001190:	d802      	bhi.n	8001198 <HAL_GPIO_Init+0x14c>
 8001192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	e002      	b.n	800119e <HAL_GPIO_Init+0x152>
 8001198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119a:	3b08      	subs	r3, #8
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	210f      	movs	r1, #15
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	6a39      	ldr	r1, [r7, #32]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	431a      	orrs	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 80b1 	beq.w	800132e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001304 <HAL_GPIO_Init+0x2b8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001304 <HAL_GPIO_Init+0x2b8>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001304 <HAL_GPIO_Init+0x2b8>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011e4:	4a48      	ldr	r2, [pc, #288]	@ (8001308 <HAL_GPIO_Init+0x2bc>)
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a40      	ldr	r2, [pc, #256]	@ (800130c <HAL_GPIO_Init+0x2c0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d013      	beq.n	8001238 <HAL_GPIO_Init+0x1ec>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a3f      	ldr	r2, [pc, #252]	@ (8001310 <HAL_GPIO_Init+0x2c4>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d00d      	beq.n	8001234 <HAL_GPIO_Init+0x1e8>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a3e      	ldr	r2, [pc, #248]	@ (8001314 <HAL_GPIO_Init+0x2c8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d007      	beq.n	8001230 <HAL_GPIO_Init+0x1e4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a3d      	ldr	r2, [pc, #244]	@ (8001318 <HAL_GPIO_Init+0x2cc>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d101      	bne.n	800122c <HAL_GPIO_Init+0x1e0>
 8001228:	2303      	movs	r3, #3
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x1ee>
 800122c:	2304      	movs	r3, #4
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x1ee>
 8001230:	2302      	movs	r3, #2
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x1ee>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x1ee>
 8001238:	2300      	movs	r3, #0
 800123a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800124a:	492f      	ldr	r1, [pc, #188]	@ (8001308 <HAL_GPIO_Init+0x2bc>)
 800124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001264:	4b2d      	ldr	r3, [pc, #180]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	492c      	ldr	r1, [pc, #176]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	608b      	str	r3, [r1, #8]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001272:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	4928      	ldr	r1, [pc, #160]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 800127c:	4013      	ands	r3, r2
 800127e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800128c:	4b23      	ldr	r3, [pc, #140]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	4922      	ldr	r1, [pc, #136]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	60cb      	str	r3, [r1, #12]
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	491e      	ldr	r1, [pc, #120]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4918      	ldr	r1, [pc, #96]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012c2:	4b16      	ldr	r3, [pc, #88]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4914      	ldr	r1, [pc, #80]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d021      	beq.n	8001320 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	490e      	ldr	r1, [pc, #56]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
 80012e8:	e021      	b.n	800132e <HAL_GPIO_Init+0x2e2>
 80012ea:	bf00      	nop
 80012ec:	10320000 	.word	0x10320000
 80012f0:	10310000 	.word	0x10310000
 80012f4:	10220000 	.word	0x10220000
 80012f8:	10210000 	.word	0x10210000
 80012fc:	10120000 	.word	0x10120000
 8001300:	10110000 	.word	0x10110000
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00
 8001314:	40011000 	.word	0x40011000
 8001318:	40011400 	.word	0x40011400
 800131c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <HAL_GPIO_Init+0x304>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	43db      	mvns	r3, r3
 8001328:	4909      	ldr	r1, [pc, #36]	@ (8001350 <HAL_GPIO_Init+0x304>)
 800132a:	4013      	ands	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	3301      	adds	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	fa22 f303 	lsr.w	r3, r2, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	f47f ae8e 	bne.w	8001060 <HAL_GPIO_Init+0x14>
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	372c      	adds	r7, #44	@ 0x2c
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001370:	e003      	b.n	800137a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	041a      	lsls	r2, r3, #16
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	611a      	str	r2, [r3, #16]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e272      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8087 	beq.w	80014b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a4:	4b92      	ldr	r3, [pc, #584]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d00c      	beq.n	80013ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b0:	4b8f      	ldr	r3, [pc, #572]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d112      	bne.n	80013e2 <HAL_RCC_OscConfig+0x5e>
 80013bc:	4b8c      	ldr	r3, [pc, #560]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c8:	d10b      	bne.n	80013e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ca:	4b89      	ldr	r3, [pc, #548]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d06c      	beq.n	80014b0 <HAL_RCC_OscConfig+0x12c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d168      	bne.n	80014b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e24c      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x76>
 80013ec:	4b80      	ldr	r3, [pc, #512]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a7f      	ldr	r2, [pc, #508]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e02e      	b.n	8001458 <HAL_RCC_OscConfig+0xd4>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x98>
 8001402:	4b7b      	ldr	r3, [pc, #492]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a7a      	ldr	r2, [pc, #488]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b78      	ldr	r3, [pc, #480]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a77      	ldr	r2, [pc, #476]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001414:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e01d      	b.n	8001458 <HAL_RCC_OscConfig+0xd4>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0xbc>
 8001426:	4b72      	ldr	r3, [pc, #456]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a71      	ldr	r2, [pc, #452]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b6f      	ldr	r3, [pc, #444]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6e      	ldr	r2, [pc, #440]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0xd4>
 8001440:	4b6b      	ldr	r3, [pc, #428]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a6a      	ldr	r2, [pc, #424]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b68      	ldr	r3, [pc, #416]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a67      	ldr	r2, [pc, #412]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001456:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff f9b8 	bl	80007d4 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff f9b4 	bl	80007d4 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e200      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	4b5d      	ldr	r3, [pc, #372]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0xe4>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff f9a4 	bl	80007d4 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff f9a0 	bl	80007d4 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	@ 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1ec      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	4b53      	ldr	r3, [pc, #332]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x10c>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d063      	beq.n	8001586 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014be:	4b4c      	ldr	r3, [pc, #304]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014ca:	4b49      	ldr	r3, [pc, #292]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d11c      	bne.n	8001510 <HAL_RCC_OscConfig+0x18c>
 80014d6:	4b46      	ldr	r3, [pc, #280]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d116      	bne.n	8001510 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	4b43      	ldr	r3, [pc, #268]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_RCC_OscConfig+0x176>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e1c0      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4939      	ldr	r1, [pc, #228]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	e03a      	b.n	8001586 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001518:	4b36      	ldr	r3, [pc, #216]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff f959 	bl	80007d4 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff f955 	bl	80007d4 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e1a1      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001544:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4927      	ldr	r1, [pc, #156]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
 8001558:	e015      	b.n	8001586 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155a:	4b26      	ldr	r3, [pc, #152]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff f938 	bl	80007d4 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001568:	f7ff f934 	bl	80007d4 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e180      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d03a      	beq.n	8001608 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d019      	beq.n	80015ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <HAL_RCC_OscConfig+0x274>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a0:	f7ff f918 	bl	80007d4 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff f914 	bl	80007d4 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e160      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 face 	bl	8001b68 <RCC_Delay>
 80015cc:	e01c      	b.n	8001608 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_RCC_OscConfig+0x274>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d4:	f7ff f8fe 	bl	80007d4 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015da:	e00f      	b.n	80015fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff f8fa 	bl	80007d4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d908      	bls.n	80015fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e146      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	42420000 	.word	0x42420000
 80015f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	4b92      	ldr	r3, [pc, #584]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1e9      	bne.n	80015dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80a6 	beq.w	8001762 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161a:	4b8b      	ldr	r3, [pc, #556]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10d      	bne.n	8001642 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b88      	ldr	r3, [pc, #544]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a87      	ldr	r2, [pc, #540]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b85      	ldr	r3, [pc, #532]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163e:	2301      	movs	r3, #1
 8001640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	4b82      	ldr	r3, [pc, #520]	@ (800184c <HAL_RCC_OscConfig+0x4c8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d118      	bne.n	8001680 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164e:	4b7f      	ldr	r3, [pc, #508]	@ (800184c <HAL_RCC_OscConfig+0x4c8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a7e      	ldr	r2, [pc, #504]	@ (800184c <HAL_RCC_OscConfig+0x4c8>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165a:	f7ff f8bb 	bl	80007d4 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7ff f8b7 	bl	80007d4 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b64      	cmp	r3, #100	@ 0x64
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e103      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	4b75      	ldr	r3, [pc, #468]	@ (800184c <HAL_RCC_OscConfig+0x4c8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x312>
 8001688:	4b6f      	ldr	r3, [pc, #444]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a6e      	ldr	r2, [pc, #440]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	e02d      	b.n	80016f2 <HAL_RCC_OscConfig+0x36e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x334>
 800169e:	4b6a      	ldr	r3, [pc, #424]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4a69      	ldr	r2, [pc, #420]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6213      	str	r3, [r2, #32]
 80016aa:	4b67      	ldr	r3, [pc, #412]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4a66      	ldr	r2, [pc, #408]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	f023 0304 	bic.w	r3, r3, #4
 80016b4:	6213      	str	r3, [r2, #32]
 80016b6:	e01c      	b.n	80016f2 <HAL_RCC_OscConfig+0x36e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b05      	cmp	r3, #5
 80016be:	d10c      	bne.n	80016da <HAL_RCC_OscConfig+0x356>
 80016c0:	4b61      	ldr	r3, [pc, #388]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4a60      	ldr	r2, [pc, #384]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	6213      	str	r3, [r2, #32]
 80016cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	e00b      	b.n	80016f2 <HAL_RCC_OscConfig+0x36e>
 80016da:	4b5b      	ldr	r3, [pc, #364]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a5a      	ldr	r2, [pc, #360]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	4b58      	ldr	r3, [pc, #352]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a57      	ldr	r2, [pc, #348]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d015      	beq.n	8001726 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff f86b 	bl	80007d4 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff f867 	bl	80007d4 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e0b1      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	4b4b      	ldr	r3, [pc, #300]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0ee      	beq.n	8001702 <HAL_RCC_OscConfig+0x37e>
 8001724:	e014      	b.n	8001750 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff f855 	bl	80007d4 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff f851 	bl	80007d4 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e09b      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001744:	4b40      	ldr	r3, [pc, #256]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1ee      	bne.n	800172e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d105      	bne.n	8001762 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001756:	4b3c      	ldr	r3, [pc, #240]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	4a3b      	ldr	r2, [pc, #236]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001760:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8087 	beq.w	800187a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176c:	4b36      	ldr	r3, [pc, #216]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	d061      	beq.n	800183c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d146      	bne.n	800180e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001780:	4b33      	ldr	r3, [pc, #204]	@ (8001850 <HAL_RCC_OscConfig+0x4cc>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff f825 	bl	80007d4 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff f821 	bl	80007d4 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e06d      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a0:	4b29      	ldr	r3, [pc, #164]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b4:	d108      	bne.n	80017c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4921      	ldr	r1, [pc, #132]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a19      	ldr	r1, [r3, #32]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	430b      	orrs	r3, r1
 80017da:	491b      	ldr	r1, [pc, #108]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <HAL_RCC_OscConfig+0x4cc>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7fe fff5 	bl	80007d4 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ee:	f7fe fff1 	bl	80007d4 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e03d      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x46a>
 800180c:	e035      	b.n	800187a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180e:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <HAL_RCC_OscConfig+0x4cc>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7fe ffde 	bl	80007d4 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181c:	f7fe ffda 	bl	80007d4 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e026      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x498>
 800183a:	e01e      	b.n	800187a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d107      	bne.n	8001854 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e019      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
 8001848:	40021000 	.word	0x40021000
 800184c:	40007000 	.word	0x40007000
 8001850:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HAL_RCC_OscConfig+0x500>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	429a      	cmp	r2, r3
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000

08001888 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0d0      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d910      	bls.n	80018cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b67      	ldr	r3, [pc, #412]	@ (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 0207 	bic.w	r2, r3, #7
 80018b2:	4965      	ldr	r1, [pc, #404]	@ (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b63      	ldr	r3, [pc, #396]	@ (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0b8      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e4:	4b59      	ldr	r3, [pc, #356]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4a58      	ldr	r2, [pc, #352]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018fc:	4b53      	ldr	r3, [pc, #332]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4a52      	ldr	r2, [pc, #328]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001906:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001908:	4b50      	ldr	r3, [pc, #320]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	494d      	ldr	r1, [pc, #308]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d040      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	4b47      	ldr	r3, [pc, #284]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d115      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e07f      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b41      	ldr	r3, [pc, #260]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e073      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4b3d      	ldr	r3, [pc, #244]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06b      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001966:	4b39      	ldr	r3, [pc, #228]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f023 0203 	bic.w	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4936      	ldr	r1, [pc, #216]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001978:	f7fe ff2c 	bl	80007d4 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	e00a      	b.n	8001996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f7fe ff28 	bl	80007d4 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e053      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b2d      	ldr	r3, [pc, #180]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 020c 	and.w	r2, r3, #12
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1eb      	bne.n	8001980 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a8:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d210      	bcs.n	80019d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 0207 	bic.w	r2, r3, #7
 80019be:	4922      	ldr	r1, [pc, #136]	@ (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e032      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4916      	ldr	r1, [pc, #88]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a02:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	490e      	ldr	r1, [pc, #56]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a16:	f000 f821 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	490a      	ldr	r1, [pc, #40]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a28:	5ccb      	ldrb	r3, [r1, r3]
 8001a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2e:	4a09      	ldr	r2, [pc, #36]	@ (8001a54 <HAL_RCC_ClockConfig+0x1cc>)
 8001a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a32:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_RCC_ClockConfig+0x1d0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fe8a 	bl	8000750 <HAL_InitTick>

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40022000 	.word	0x40022000
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	08001fe0 	.word	0x08001fe0
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a76:	4b1e      	ldr	r3, [pc, #120]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x30>
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x36>
 8001a8a:	e027      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a8e:	613b      	str	r3, [r7, #16]
      break;
 8001a90:	e027      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	0c9b      	lsrs	r3, r3, #18
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	4a17      	ldr	r2, [pc, #92]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a9c:	5cd3      	ldrb	r3, [r2, r3]
 8001a9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d010      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	0c5b      	lsrs	r3, r3, #17
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	4a11      	ldr	r2, [pc, #68]	@ (8001afc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001abe:	fb03 f202 	mul.w	r2, r3, r2
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e004      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a0c      	ldr	r2, [pc, #48]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	613b      	str	r3, [r7, #16]
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ade:	613b      	str	r3, [r7, #16]
      break;
 8001ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae2:	693b      	ldr	r3, [r7, #16]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	007a1200 	.word	0x007a1200
 8001af8:	08001ff8 	.word	0x08001ff8
 8001afc:	08002008 	.word	0x08002008
 8001b00:	003d0900 	.word	0x003d0900

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b02      	ldr	r3, [pc, #8]	@ (8001b14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	20000000 	.word	0x20000000

08001b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b1c:	f7ff fff2 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4903      	ldr	r1, [pc, #12]	@ (8001b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	08001ff0 	.word	0x08001ff0

08001b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	0adb      	lsrs	r3, r3, #11
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4903      	ldr	r1, [pc, #12]	@ (8001b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08001ff0 	.word	0x08001ff0

08001b68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b70:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <RCC_Delay+0x34>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <RCC_Delay+0x38>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	0a5b      	lsrs	r3, r3, #9
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b84:	bf00      	nop
  }
  while (Delay --);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	60fa      	str	r2, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f9      	bne.n	8001b84 <RCC_Delay+0x1c>
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	10624dd3 	.word	0x10624dd3

08001ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e042      	b.n	8001c3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe fd06 	bl	80005dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2224      	movs	r2, #36	@ 0x24
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f91d 	bl	8001e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	4613      	mov	r3, r2
 8001c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d16d      	bne.n	8001d40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_UART_Transmit+0x2c>
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e066      	b.n	8001d42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2221      	movs	r2, #33	@ 0x21
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c82:	f7fe fda7 	bl	80007d4 <HAL_GetTick>
 8001c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	88fa      	ldrh	r2, [r7, #6]
 8001c8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	88fa      	ldrh	r2, [r7, #6]
 8001c92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c9c:	d108      	bne.n	8001cb0 <HAL_UART_Transmit+0x6c>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d104      	bne.n	8001cb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	e003      	b.n	8001cb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cb8:	e02a      	b.n	8001d10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2180      	movs	r1, #128	@ 0x80
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f840 	bl	8001d4a <UART_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e036      	b.n	8001d42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ce8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	3302      	adds	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	e007      	b.n	8001d02 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1cf      	bne.n	8001cba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2200      	movs	r2, #0
 8001d22:	2140      	movs	r1, #64	@ 0x40
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f810 	bl	8001d4a <UART_WaitOnFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e006      	b.n	8001d42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e000      	b.n	8001d42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001d40:	2302      	movs	r3, #2
  }
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3720      	adds	r7, #32
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b090      	sub	sp, #64	@ 0x40
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d5a:	e050      	b.n	8001dfe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d62:	d04c      	beq.n	8001dfe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8001d6a:	f7fe fd33 	bl	80007d4 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d241      	bcs.n	8001dfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	330c      	adds	r3, #12
 8001d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d84:	e853 3f00 	ldrex	r3, [r3]
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	330c      	adds	r3, #12
 8001d98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d9a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001da0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001da2:	e841 2300 	strex	r3, r2, [r1]
 8001da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e5      	bne.n	8001d7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3314      	adds	r3, #20
 8001db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	e853 3f00 	ldrex	r3, [r3]
 8001dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3314      	adds	r3, #20
 8001dcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001dce:	623a      	str	r2, [r7, #32]
 8001dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd2:	69f9      	ldr	r1, [r7, #28]
 8001dd4:	6a3a      	ldr	r2, [r7, #32]
 8001dd6:	e841 2300 	strex	r3, r2, [r1]
 8001dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e5      	bne.n	8001dae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e00f      	b.n	8001e1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4013      	ands	r3, r2
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d09f      	beq.n	8001d5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3740      	adds	r7, #64	@ 0x40
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001e62:	f023 030c 	bic.w	r3, r3, #12
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <UART_SetConfig+0x114>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d103      	bne.n	8001e98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e90:	f7ff fe56 	bl	8001b40 <HAL_RCC_GetPCLK2Freq>
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	e002      	b.n	8001e9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e98:	f7ff fe3e 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8001e9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009a      	lsls	r2, r3, #2
 8001ea8:	441a      	add	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	4a22      	ldr	r2, [pc, #136]	@ (8001f40 <UART_SetConfig+0x118>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	0119      	lsls	r1, r3, #4
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009a      	lsls	r2, r3, #2
 8001ec8:	441a      	add	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <UART_SetConfig+0x118>)
 8001ed6:	fba3 0302 	umull	r0, r3, r3, r2
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	2064      	movs	r0, #100	@ 0x64
 8001ede:	fb00 f303 	mul.w	r3, r0, r3
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	3332      	adds	r3, #50	@ 0x32
 8001ee8:	4a15      	ldr	r2, [pc, #84]	@ (8001f40 <UART_SetConfig+0x118>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef4:	4419      	add	r1, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	009a      	lsls	r2, r3, #2
 8001f00:	441a      	add	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <UART_SetConfig+0x118>)
 8001f0e:	fba3 0302 	umull	r0, r3, r3, r2
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	2064      	movs	r0, #100	@ 0x64
 8001f16:	fb00 f303 	mul.w	r3, r0, r3
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	3332      	adds	r3, #50	@ 0x32
 8001f20:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <UART_SetConfig+0x118>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	440a      	add	r2, r1
 8001f32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40013800 	.word	0x40013800
 8001f40:	51eb851f 	.word	0x51eb851f

08001f44 <memset>:
 8001f44:	4603      	mov	r3, r0
 8001f46:	4402      	add	r2, r0
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <memset+0xa>
 8001f4c:	4770      	bx	lr
 8001f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f52:	e7f9      	b.n	8001f48 <memset+0x4>

08001f54 <__libc_init_array>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	2600      	movs	r6, #0
 8001f58:	4d0c      	ldr	r5, [pc, #48]	@ (8001f8c <__libc_init_array+0x38>)
 8001f5a:	4c0d      	ldr	r4, [pc, #52]	@ (8001f90 <__libc_init_array+0x3c>)
 8001f5c:	1b64      	subs	r4, r4, r5
 8001f5e:	10a4      	asrs	r4, r4, #2
 8001f60:	42a6      	cmp	r6, r4
 8001f62:	d109      	bne.n	8001f78 <__libc_init_array+0x24>
 8001f64:	f000 f81a 	bl	8001f9c <_init>
 8001f68:	2600      	movs	r6, #0
 8001f6a:	4d0a      	ldr	r5, [pc, #40]	@ (8001f94 <__libc_init_array+0x40>)
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f98 <__libc_init_array+0x44>)
 8001f6e:	1b64      	subs	r4, r4, r5
 8001f70:	10a4      	asrs	r4, r4, #2
 8001f72:	42a6      	cmp	r6, r4
 8001f74:	d105      	bne.n	8001f82 <__libc_init_array+0x2e>
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
 8001f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f7c:	4798      	blx	r3
 8001f7e:	3601      	adds	r6, #1
 8001f80:	e7ee      	b.n	8001f60 <__libc_init_array+0xc>
 8001f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f86:	4798      	blx	r3
 8001f88:	3601      	adds	r6, #1
 8001f8a:	e7f2      	b.n	8001f72 <__libc_init_array+0x1e>
 8001f8c:	0800200c 	.word	0x0800200c
 8001f90:	0800200c 	.word	0x0800200c
 8001f94:	0800200c 	.word	0x0800200c
 8001f98:	08002010 	.word	0x08002010

08001f9c <_init>:
 8001f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9e:	bf00      	nop
 8001fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa2:	bc08      	pop	{r3}
 8001fa4:	469e      	mov	lr, r3
 8001fa6:	4770      	bx	lr

08001fa8 <_fini>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	bf00      	nop
 8001fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fae:	bc08      	pop	{r3}
 8001fb0:	469e      	mov	lr, r3
 8001fb2:	4770      	bx	lr
